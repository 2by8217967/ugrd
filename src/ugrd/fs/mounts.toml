binaries = [ "lsblk", "blkid", "mount", "umount", "mkdir" ]

provides = "mounts" 

cmdline_strings =  ["root", "roottype", "rootflags", "ugrd_mount_timeout" ]
cmdline_bools = ["ugrd_no_fsck"]

run_dirs = [ "ugrd" ]

mount_timeout = 1
autodetect_root = true
autodetect_root_dm = true
autodetect_root_luks = true
autodetect_root_lvm = true
autodetect_root_raid = true
autodetect_init_mount = true

[imports.config_processing]
"ugrd.fs.mounts" = [ "_process_run_dirs_multi",
		     "_process_mounts_multi",
		     "_process_late_mounts_multi"]

[imports.build_enum]
"ugrd.fs.mounts" = [ "get_mounts_info", "get_virtual_block_info", "get_blkid_info", "get_zpool_info",
		     "autodetect_root", "autodetect_mounts", "autodetect_init_mount" ]

[imports.build_tasks]
"ugrd.fs.mounts" = [ "export_mount_info" ]

[imports.build_final]
"ugrd.fs.mounts" = [ "generate_fstab" ]

[imports.checks]
"ugrd.fs.mounts" = [ "check_mounts" ]

[imports.init_pre]
"ugrd.fs.mounts" = [ "mount_base", "make_run_dirs" ]

[imports.init_main]
"ugrd.fs.mounts" = [ "mount_fstab" ]

[imports.init_mount]
"ugrd.fs.mounts" = [ "mount_root", "mount_late" ]

[imports.functions]
"ugrd.fs.mounts" = [ "mount_default_root" ]

[imports.init_final]
"ugrd.fs.mounts" = [ "umount_fstab" ]

[import_order.after]
mount_late = "mount_root"
make_run_dirs = "mount_base"

[custom_parameters]
mounts = "dict"  # Add the mounts property, used to define the mounts to be made in the fstab
mount_devpts = "bool"  # Whether or not to mount devpts
run_dirs = "NoDupFlatList"  # A list of directories to be created under /run
late_mounts = "dict"  # Like mounts, but run after the root is mounted
auto_mounts = "NoDupFlatList"  # A list of mounts to be automatically added to the mounts list
mount_timeout = "float"  # The time to wait between mount attempts
mount_retries = "int"  # The number of times to re-attempt mounting the fstab, infinite if not set
mount_cmd = "str"  # The mount command called by mount_root, can be overridden
autodetect_root = "bool"  # Add the autodetect_root property, if defined, the root mount will be autodetected
autodetect_root_dm = "bool"  # Whether or not to try to autodetect device-mapper partitions
autodetect_root_luks = "bool"  # Whether or not to try to autodetect LUKS partitions
autodetect_root_lvm = "bool"  # Whether or not to try to autodetect LVM partitions
autodetect_root_raid = "bool"  # Whether or not to try to autodetect MDRAID partitions
autodetect_init_mount = "bool"  # Adds a late_mount for the init target if it exists under a mount on the host
no_fsck = "bool"  # Whether or not to skip fsck on the root device when applicable
_mounts = "dict"  # The mounts information
_vblk_info = "dict"  # Virtual block device information
_blkid_info = "dict"  # The blkid information
_zpool_info = "dict"  # The zpool information

# Define the base of the root mount
[mounts.root]
options = ['ro']
destination = "/target_rootfs"

# Define the default mounts
# The format is mounts.mount where the mount is the name of the mount
# Alternatively, the destination option can be used to define the mount point

[mounts.proc]
type = "proc"
path = "proc"
options = ['nodev', 'noexec', 'nosuid']
base_mount = true

[mounts.sys]
type = "sysfs"
path = "sysfs"
options = ['nodev', 'noexec', 'nosuid']
base_mount = true

[mounts.dev]
type = "devtmpfs"
path = "devtmpfs"
options = ['nosuid', 'mode=0755']
base_mount = true

[mounts.devpts]
type = "devpts"
path = "devpts"
destination = "/dev/pts"
options = ['noauto', 'nosuid', 'noexec', 'rw', 'mode=620', 'gid=5']
base_mount = true

[mounts.run]
type = "tmpfs"
path = "tmpfs"
options = ["nosuid", "noexec", "nodev", "mode=0755"]
base_mount = true
